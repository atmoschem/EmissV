[{"path":"https://atmoschem.github.io/EmissV/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://atmoschem.github.io/EmissV/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to EmissV","title":"Contributing to EmissV","text":"Thank contributions! Following guidelines help streamline process contributing make sure ’re page. ask read guide follow best abilities, welcome contributions , regardless level experience. participating project, agree abide code conduct.","code":""},{"path":"https://atmoschem.github.io/EmissV/CONTRIBUTING.html","id":"types-of-contributions","dir":"","previous_headings":"","what":"Types of contributions","title":"Contributing to EmissV","text":"Don’t feel must computer whiz make meaningful contributions. Feel free : Identify areas future development (open Issue) Identify issues/bugs (open Issue) Write tutorials/vignettes (open Pull Request contribute ones , make elsewhere send us link) Add functionality (open Pull Request) Fix bugs (open Pull Request)","code":""},{"path":"https://atmoschem.github.io/EmissV/CONTRIBUTING.html","id":"new-to-github","dir":"","previous_headings":"","what":"New to GitHub?","title":"Contributing to EmissV","text":"Getting ready make first contribution? couple tutorials may wish check : Tutorial first-timers contribute (-depth lessons) GitHub setup GitHub pull requests.","code":""},{"path":"https://atmoschem.github.io/EmissV/CONTRIBUTING.html","id":"how-to-contribute-code","dir":"","previous_headings":"","what":"How to contribute code","title":"Contributing to EmissV","text":"Fork repository Clone repository GitHub computer e.g,. git clone https://github.com/atmoschem/EmissV.git git remote add upstream https://github.com/atmoschem/EmissV.git making changes make sure pull changes upstream git pull upstream changes beyond minor typos, add item NEWS.md describing changes add DESCRIPTION file contributor Push GitHub account Submit pull request home base (likely master branch, check make sure) atmoschem/EmissV","code":""},{"path":"https://atmoschem.github.io/EmissV/CONTRIBUTING.html","id":"code-formatting","dir":"","previous_headings":"","what":"Code formatting","title":"Contributing to EmissV","text":"general follow convention http://r-pkgs..co.nz/r.html#style (snake_case functions argument names, etc.) conflict, default style EmissV Use explicit package imports (.e. package_name::package_function) avoid @import possible","code":""},{"path":"https://atmoschem.github.io/EmissV/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Schuch. Author, maintainer. Sergio Ibarra-Espinosa. Author.","code":""},{"path":"https://atmoschem.github.io/EmissV/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schuch D, Ibarra-Espinosa S, Dias de Freitas E (2018). “EmissV: R package create vehicular emissions Top-methods air quality models.” Journal Open Source Software, 6. doi:10.21105/joss.00662, https://joss.theoj.org/papers/10.21105/joss.00662. Schuch D, Ibarra-Espinosa S, Dias de Freitas E, Andrade M (2018). “EmissV: preprocessor WRF-Chem model.” Journal Atmospheric Science Research, 5. doi:10.30564/jasr.v1i1.347, https://journals.bilpubgroup.com/index.php/jasr/article/view/347. Schuch D, Ibarra-Espinosa S (2025). EmissV: Tools Create Emissions Air Quality Models. R package version 0.665.9.0, https://atmoschem.github.io/EmissV/.","code":"@Article{,   title = {{EmissV: An R package to create vehicular and other emissions by Top-down methods to air quality models}},   author = {Daniel Schuch and Sergio Ibarra-Espinosa and Edmilson {Dias de Freitas}},   year = {2018},   journal = {The Journal of Open Source Software},   url = {https://joss.theoj.org/papers/10.21105/joss.00662},   pages = {6},   doi = {10.21105/joss.00662}, } @Article{,   title = {{EmissV: A preprocessor for WRF-Chem model}},   author = {Daniel Schuch and Sergio Ibarra-Espinosa and Edmilson {Dias de Freitas} and Maria Andrade},   year = {2018},   journal = {Journal of Atmospheric Science Research},   url = {https://journals.bilpubgroup.com/index.php/jasr/article/view/347},   pages = {5},   doi = {10.30564/jasr.v1i1.347}, } @Manual{,   title = {EmissV: Tools for Create Emissions for Air Quality Models},   author = {Daniel Schuch and Sergio Ibarra-Espinosa},   year = {2025},   note = {R package version 0.665.9.0},   url = {https://atmoschem.github.io/EmissV/}, }"},{"path":"https://atmoschem.github.io/EmissV/index.html","id":"emissv","dir":"","previous_headings":"","what":"Tools for Create Emissions for Air Quality Models","title":"Tools for Create Emissions for Air Quality Models","text":"EmissV R-package provides tools create emissions use numeric air quality models WRF-Chem. package can read inputs global fluxes inventories Netcdf Format [1] estimate emissions using top-approach point/line/area sources [2]. [1] Schuch D, Ibarra-Espinosa S, Dias de Freitas E, Andrade M (2018). “EmissV: preprocessor WRF-Chem model.” Journal Atmospheric Science Research, 5, doi:10.30564/jasr.v1i1.347. [2] Schuch D, Ibarra-Espinosa S, Dias de Freitas E (2018). “EmissV: R package create vehicular emissions Top-methods air quality models.” Journal Open Source Software, 6, doi:10.21105/joss.00662.","code":""},{"path":[]},{"path":"https://atmoschem.github.io/EmissV/index.html","id":"system-dependencies","dir":"","previous_headings":"Installation","what":"System dependencies","title":"Tools for Create Emissions for Air Quality Models","text":"EmissV import functions ncdf4 reading model information, raster sf process grinded/geographic information units. packages need aditional libraries:","code":""},{"path":"https://atmoschem.github.io/EmissV/index.html","id":"to-ubuntu","dir":"","previous_headings":"Installation","what":"To Ubuntu","title":"Tools for Create Emissions for Air Quality Models","text":"following steps required installation Ubuntu:","code":"sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable --yes   sudo apt-get --yes --force-yes update -qq   # netcdf dependencies:   sudo apt-get install --yes libnetcdf-dev netcdf-bin   # units/udunits2 dependency:   sudo apt-get install --yes libudunits2-dev   # sf dependencies (without libudunits2-dev):   sudo apt-get install --yes libgdal-dev libgeos-dev libproj-dev"},{"path":"https://atmoschem.github.io/EmissV/index.html","id":"to-fedora","dir":"","previous_headings":"Installation","what":"To Fedora","title":"Tools for Create Emissions for Air Quality Models","text":"following steps required installation Fedora:","code":"sudo dnf update   # netcdf dependencies:   sudo yum install netcdf-devel   # units/udunits2 dependency:   sudo yum install udunits2-devel   # sf dependencies (without libudunits2-dev):   sudo yum install gdal-devel proj-devel proj-epsg proj-nad geos-devel"},{"path":"https://atmoschem.github.io/EmissV/index.html","id":"to-windows","dir":"","previous_headings":"Installation","what":"To Windows","title":"Tools for Create Emissions for Air Quality Models","text":"additional steps windows installation. Detailed instructions can found netcdf, libudunits2-dev sf developers page.","code":""},{"path":"https://atmoschem.github.io/EmissV/index.html","id":"to-conda-miniconda--anaconda","dir":"","previous_headings":"Installation","what":"To conda (miniconda / anaconda)","title":"Tools for Create Emissions for Air Quality Models","text":"First create new environment called rspatial (better name): install requisites:","code":"conda create -n rspatial -y   conda activate rspatial conda install -c conda-forge r-sf -y   conda install -c conda-forge r-rgdal -y   conda install -c conda-forge r-lwgeom -y   conda install -c conda-forge r-raster -y"},{"path":"https://atmoschem.github.io/EmissV/index.html","id":"package-installation","dir":"","previous_headings":"Installation","what":"Package installation","title":"Tools for Create Emissions for Air Quality Models","text":"install CRAN version: install development version using remotes: install development version using devtools:","code":"install.packages(\"EmissV\") require(\"remotes\") remotes::install_github(\"atmoschem/EmissV\") require(\"devtools\") devtools::install_github(\"atmoschem/EmissV\")"},{"path":"https://atmoschem.github.io/EmissV/index.html","id":"using-emissv-with-edgar-81-emissions","dir":"","previous_headings":"","what":"Using EmissV with EDGAR 8.1 emissions","title":"Tools for Create Emissions for Air Quality Models","text":"EmissV can used process emissions atmospheric pollutants green house gases inventories EDGAR, RCP, GAINS datasets NetCDF format, GEIA-ACCENT ECCAD emission data portal makes available inventories. can verify supported format : generate simple emission ’s straightforward process 4 steps: next step save emission emission file, next example show save emissions using eixport R-package: Check wrf_create, wrf_put to_wrf information customize application. NOTE: emission file must compatible WRF-Chem options (many arguments namelist.input WRF) check eixport R-Package documentation WRF-Chem manual information. R-packages available write netcdf ncdf4, RNetCDF, tidync available CRAN. languages NCL leanguage Python package wrf-python, preprocessor anthro_emiss aternative write NetCDF files.","code":"EmissV::read() library(EmissV) ### 1. download the EDGAR 8.1 Netcdf flux file using R or from  ### https://jeodpp.jrc.ec.europa.eu/ftp/jrc-opendata/EDGAR/datasets # create the temporary directory to download the data folder <- file.path(tempdir(), \"EDGARv8.1\") dir.create(folder) # download the total emissions of NOx from EDGAR v50_AP for 2015 url     <- \"https://jeodpp.jrc.ec.europa.eu/ftp/jrc-opendata/EDGAR/datasets\" dataset <- \"v81_FT2022_AP_new/NOx/TOTALS/flx_nc\" file    <- \"v8.1_FT2022_AP_NOx_2022_TOTALS_flx_nc.zip\" download.file(paste0(url,\"/\",dataset,\"/\",file), paste0(folder,\"/\",file)) # unzip the file unzip(paste0(folder,\"/\",file),exdir = folder)  ### 2. read the emissions (using the spec argument to split NOx into NO and NO2) nox  <- read(file    = dir(path=folder, pattern=\"flx\\\\.nc\", full.names=TRUE),              version = \"EDGARv8\",              spec    = c(E_NO  = 0.9 ,   # 90% of NOx is NO                          E_NO2 = 0.1 ))  # 10% of NOx is NO2  ### 3. get the information from a WRF grid from a initial conditions file (wrfinput) g   <- gridInfo(paste(system.file(\"extdata\", package = \"EmissV\"),\"/wrfinput_d01\",sep=\"\"))  ### 4. calculate the emissions for grid g NO  <- emission(grid = g, inventory = NOx$E_NO, pol = \"NO\", mm = 30.01,   plot = T) NO2 <- emission(grid = g, inventory = NOx$E_NO2,pol = \"NO2\",mm = 46.0055, plot = T) library(eixport) ### create a temporary folder for emissions dir.create(file.path(tempdir(), \"EMISSION\"))  ### create the emision file wrf_create(wrfinput_dir = system.file(\"extdata\", package = \"EmissV\"),            wrfchemi_dir = file.path(tempdir(), \"EMISSION\"),            domains      = 1)             ### get the file path of the emission file emis_file <- list.files(path = file.path(tempdir(), \"EMISSION\"),                         pattern = \"wrfchemi_d01\",                         full.names = TRUE)  ### save the emission wrf_put(NO,  file = emis_file, name = \"E_NO\",  verbose = TRUE) wrf_put(NO2, file = emis_file, name = \"E_NO2\", verbose = TRUE)"},{"path":"https://atmoschem.github.io/EmissV/index.html","id":"using-emissv-to-estimate-vehicular-emissions","dir":"","previous_headings":"","what":"Using EmissV to estimate vehicular emissions","title":"Tools for Create Emissions for Air Quality Models","text":"EmissV vehicular emissions estimated top-approach, .e. emissions calculated using statistical description fleet avaliable level (National, Estadual, City, etc).following steps show example workflow calculating vehicular emissions, emissions initially temporally spatially disaggregated, distributed spatially temporally. . Total: emission pollutants estimated fleet, use emission factors interest area (cities, states, countries, etc). II. Spatial distribution: package functions read information tables, georeferenced images (tiff), shapefiles (sh), OpenStreet maps (osm), global inventories NetCDF format (nc) calculate point, line area sources. III. Emission calculation: calculate final emission different sources converts model units resolution. IV. Temporal distribution: package set hourly profiles represent mean activity day week calculated traffic counts toll stations located São Paulo city. package additional functions read netcdf data, create line point sources (plume rise) estimate total emissions volatile organic compounds exhaust (exhaust pipe), liquid (carter evaporative) vapor (fuel transfer operations). Functions: read: read global inventories netcdf format vehicles: tool set-vehicle data.table emissionFactor: tool set-emission factors data.table gridInfo: read grid information NetCDF file pointSource: emissions point sources plumeRise: calculate plume rise rasterSource: distribution emissions georeferenced image lineSource: distribution emissions line vectors areaSource: distribution emissions region totalEmission: total emissions emission: Emissions atmospheric models speciation: Speciation emissions different compounds Sample datasets: Species: species mapping tables Perfil: vehicle counting profile vehicular activity Sample image persistent lights Defense Meteorological Satellite Program (DMSP) CETESB 2015 emission factors emissionFactor(example=T) DETRAN 2016 data SP vahicle distribution vehicles(example=T) Shapefiles Brazil states","code":"library(EmissV)  fleet <- vehicles(example = T) # using a example of vehicles (DETRAN 2016 data and SP vahicle distribution): #                              Category   Type Fuel      Use       SP ... # Light Duty Vehicles Gasohol   LDV_E25    LDV  E25  41 km/d 11624342 ... # Light Duty Vehicles Ethanol  LDV_E100    LDV E100  41 km/d   874627 ... # Light Duty Vehicles Flex        LDV_F    LDV FLEX  41 km/d  9845022 ... # Diesel Trucks               TRUCKS_B5 TRUCKS   B5 110 km/d   710634 ... # Diesel Urban Busses           CBUS_B5    BUS   B5 165 km/d   792630 ... # Diesel Intercity Busses       MBUS_B5    BUS   B5 165 km/d    21865 ... # Gasohol Motorcycles          MOTO_E25   MOTO  E25 140 km/d  3227921 ... # Flex Motorcycles               MOTO_F   MOTO FLEX 140 km/d   235056 ...  fleet <- fleet[,c(-6,-8,-9)] # dropping RJ, PR and SC  EF     <- emissionFactor(example = T) # using a example emission factor (values calculated from CETESB 2015): #                                     CO          PM # Light duty Vehicles Gasohol  1.75 g/km 0.0013 g/km # Light Duty Vehicles Ethanol 10.04 g/km 0.0000 g/km # Light Duty Vehicles Flex     0.39 g/km 0.0010 g/km # Diesel trucks                0.45 g/km 0.0612 g/km # Diesel urban busses          0.77 g/km 0.1052 g/km # Diesel intercity busses      1.48 g/km 0.1693 g/km # Gasohol motorcycles          1.61 g/km 0.0000 g/km # Flex motorcycles             0.75 g/km 0.0000 g/km  TOTAL  <- totalEmission(fleet,EF,pol = c(\"CO\"),verbose = T) # Total of CO : 1128297.0993334 t year-1 raster <- raster::raster(paste(system.file(\"extdata\", package = \"EmissV\"),                          \"/dmsp.tiff\",sep=\"\"))  grid   <- gridInfo(paste(system.file(\"extdata\", package = \"EmissV\"),                    \"/wrfinput_d02\",sep=\"\")) # Grid information from: .../EmissV/extdata/wrfinput_d02  shape  <- raster::shapefile(paste(system.file(\"extdata\", package = \"EmissV\"),                             \"/BR.shp\",sep=\"\"),verbose = F)[12,1] Minas_Gerais <- areaSource(shape,raster,grid,name = \"Minas Gerais\") # processing Minas Gerais area ... # fraction of Minas Gerais area inside the domain = 0.0145921494236101  shape  <- raster::shapefile(paste(system.file(\"extdata\", package = \"EmissV\"),                             \"/BR.shp\",sep=\"\"),verbose = F)[22,1] Sao_Paulo <- areaSource(shape,raster,grid,name = \"Sao Paulo\") # processing Sao Paulo area ... # fraction of Sao Paulo area inside the domain = 0.474658563750987  sp::spplot(raster::merge(drop_units(TOTAL$CO[[1]]) * Sao_Paulo,                           drop_units(TOTAL$CO[[2]]) * Minas_Gerais),            scales = list(draw=TRUE),ylab=\"Lat\",xlab=\"Lon\",            main=list(label=\"Emissions of CO [g/d]\"),            col.regions = c(\"#031638\",\"#001E48\",\"#002756\",\"#003062\",                            \"#003A6E\",\"#004579\",\"#005084\",\"#005C8E\",                            \"#006897\",\"#0074A1\",\"#0081AA\",\"#008FB3\",                            \"#009EBD\",\"#00AFC8\",\"#00C2D6\",\"#00E3F0\")) CO_emissions <- emission(total = TOTAL,                          pol   = \"CO\",                          area  = list(SP = Sao_Paulo, MG = Minas_Gerais),                          grid  = grid,                          mm    = 28,                           plot  = T) # calculating emissions for CO using molar mass = 28 ... data(perfil) names(perfil)"},{"path":"https://atmoschem.github.io/EmissV/index.html","id":"contributing","dir":"","previous_headings":"Using EmissV to estimate vehicular emissions","what":"Contributing","title":"Tools for Create Emissions for Air Quality Models","text":"Bug reports, suggestions, code contributions welcome. Please see CONTRIBUTING.md details. Note project adopt Contributor Code Conduct participating project agree abide terms.","code":""},{"path":"https://atmoschem.github.io/EmissV/index.html","id":"license","dir":"","previous_headings":"Using EmissV to estimate vehicular emissions","what":"License","title":"Tools for Create Emissions for Air Quality Models","text":"EmissV published terms MIT License. Copyright (c) 2018 Daniel Schuch.","code":""},{"path":"https://atmoschem.github.io/EmissV/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"Air quality models need input data containing information atmosphere (temperature, wind, humidity), terrestrial data (terrain, land use, soil types) emissions. Therefore, emission inventories easily seen scapegoat mismatch found modelled observed concentrations air pollutants [@PullesHeslinga2010]. anthropogenic emissions, especially vehicular emissions, highly dependent human activity constantly changing due various factors ranging economic (state conservation fleet, renewal fleet price fuel) legal aspects (vehicle routing). EmissV R package estimates vehicular emissions top-approach, emissions calculated using statistical description fleet available level (National, State, City, etc). following steps show example workflow calculating vehicular emissions, emissions initially temporally spatially disaggregated, distributed spatially temporally used input numeric air quality models WRF-Chem [@Grelletal2005]. . Total: emission pollutants estimated fleet (number, type year vehicles), vehicular activity (km/day) emission factors (g/km) pollutant interest area (cities, states, countries, etc) alternatively totals inventory can used. II. Spatial distribution: package functions read information tables, georeferenced images (tiff), shapefiles (sh), openstreetmap data (osm), global inventories NetCDF format (nc) calculate point, line area sources. III. Emission calculation: calculates final emission different sources converts model units resolution. IV. Temporal distribution: set hourly profiles represents mean activity (hour day week) calculated traffic counts toll stations located São Paulo city available apply emissions. package additional functions creating emissions individual sources (including plume rise parameterizations) estimate vehicular emissions volatile organic compounds exhaust (exhaust pipe), liquid (carter evaporative) vapor (fuel transfer operations).","code":""},{"path":"https://atmoschem.github.io/EmissV/paper.html","id":"functions-and-data","dir":"","previous_headings":"","what":"Functions and data","title":"Summary","text":"EmissV counts folllwing functions:","code":""},{"path":"https://atmoschem.github.io/EmissV/paper.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Summary","text":"following example creates area source São Paulo State (Brasil). vehicles function creates data.frame information São Paulo Fleet using data [@detran2016], emissionFactors creates data.frame emission factors CO PM [@cetesbEV2015]. totalEmission calculates total emissions CO vehicles emission factors. next 3 lines opens different data: wrf file, raster area shapefiles. data input areaSouce creates area source based image persistent lights Defense Meteorological Satellite Program (DMSP) São Paulo Minas Gerais (Brasil) states finally function emission calculates CO emissions. emissions CO calculated example can seen Figure 1 g/d (pixel) final emissions Figure 2 MOL h-1 km-1 (model grid cell). emissions can written WRF-Chem emission files using package makes interface NetCDF format ncdf4 [@ncdf4], RNetCDF [@RNetCDF], ncdf.tools [@ncdftools] eixport [@eixport]. output values (also figures generated EmissV) might differ slightly depending EmissV package-version (well different versios ncdf4, units, raster, sf, lwgeom, etc) changes sample files. R package EmissV available repository https://github.com/atmoschem/EmissV. installation tested automatically Linux via TravisCI Windows via Appveyor continuous integration systems. Also, EmissV already CRAN https://CRAN.R-project.org/package=EmissV.","code":"library(EmissV)  fleet <- vehicles(example = T) # using a example of vehicles (DETRAN 2016 data and SP vahicle distribution): #                              Category   Type Fuel      Use       SP ... # Light Duty Vehicles Gasohol   LDV_E25    LDV  E25  41 km/d 11624342 ... # Light Duty Vehicles Ethanol  LDV_E100    LDV E100  41 km/d   874627 ... # Light Duty Vehicles Flex        LDV_F    LDV FLEX  41 km/d  9845022 ... # Diesel Trucks               TRUCKS_B5 TRUCKS   B5 110 km/d   710634 ... # Diesel Urban Busses           CBUS_B5    BUS   B5 165 km/d   792630 ... # Diesel Intercity Busses       MBUS_B5    BUS   B5 165 km/d    21865 ... # Gasohol Motorcycles          MOTO_E25   MOTO  E25 140 km/d  3227921 ... # Flex Motorcycles               MOTO_F   MOTO FLEX 140 km/d   235056 ...  # dropping the fleet from Rio de Janeiro (RJ), Parana (PR) and Santa Catarina (SC) fleet <- fleet[,c(-6,-8,-9)]  EF     <- emissionFactor(example = T) # using a example emission factor (values calculated from CETESB 2015): #                                     CO          PM # Light Duty Vehicles Gasohol  1.75 g/km 0.0013 g/km # Light Duty Vehicles Ethanol 10.04 g/km 0.0000 g/km # Light Duty Vehicles Flex     0.39 g/km 0.0010 g/km # Diesel Trucks                0.45 g/km 0.0612 g/km # Diesel Urban Busses          0.77 g/km 0.1052 g/km # Diesel Intercity Busses      1.48 g/km 0.1693 g/km # Gasohol Motorcycles          1.61 g/km 0.0000 g/km # Flex Motorcycles             0.75 g/km 0.0000 g/km  TOTAL  <- totalEmission(fleet,EF,pol = c(\"CO\"),verbose = T) # Total of CO : 1128297.0993334 t year-1  grid   <- gridInfo(paste(system.file(\"extdata\", package = \"EmissV\"),                    \"/wrfinput_d02\",sep=\"\")) # Grid information from: .../EmissV/extdata/wrfinput_d02  raster <- raster::raster(paste(system.file(\"extdata\", package = \"EmissV\"),                          \"/dmsp_hi-res.tiff\",sep=\"\"))  shape  <- raster::shapefile(paste(system.file(\"extdata\", package = \"EmissV\"),                             \"/BR.shp\",sep=\"\"),verbose = F)[12,1]                              Minas_Gerais <- areaSource(shape,raster,grid,name = \"Minas Gerais\") # processing Minas Gerais area ... # fraction of Minas Gerais area inside the domain = 0.0147607845622591  shape  <- raster::shapefile(paste(system.file(\"extdata\", package = \"EmissV\"),                             \"/BR.shp\",sep=\"\"),verbose = F)[22,1]                              Sao_Paulo <- areaSource(shape,raster,grid,name = \"Sao Paulo\") # processing Sao Paulo area ... # fraction of Sao Paulo area inside the domain = 0.473260323300595  sp::spplot(raster::merge(drop_units(TOTAL$CO[[1]]) * Sao_Paulo,                           drop_units(TOTAL$CO[[2]]) * Minas_Gerais),            scales = list(draw=TRUE),ylab=\"Lat\",xlab=\"Lon\",            # main=list(label=\"Emissions of CO [g/d]\"),            col.regions = c(\"#031638\",\"#001E48\",\"#002756\",\"#003062\",                            \"#003A6E\",\"#004579\",\"#005084\",\"#005C8E\",                            \"#006897\",\"#0074A1\",\"#0081AA\",\"#008FB3\",                            \"#009EBD\",\"#00AFC8\",\"#00C2D6\",\"#00E3F0\"))  CO_emissions <- emission(total = TOTAL,                          pol   = \"CO\",                          area  = list(SP = Sao_Paulo, MG = Minas_Gerais),                          grid  = grid,                          mm    = 28,                           plot  = T) # calculating emissions for CO using molar mass = 28 ..."},{"path":"https://atmoschem.github.io/EmissV/paper.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Summary","text":"development EmissV supported postdoc grans Fundação da Universidade de São Paulo Fundação Coordenação de Aperfeiçoamento de Pessoal de Nível Superior.","code":""},{"path":[]},{"path":"https://atmoschem.github.io/EmissV/reference/EmissV-package.html","id":null,"dir":"Reference","previous_headings":"","what":"EmissV: Tools for Create Emissions for Air Quality Models — EmissV-package","title":"EmissV: Tools for Create Emissions for Air Quality Models — EmissV-package","text":"Processing tools create emissions use numerical air quality models. Emissions can calculated using emission factors activity data (Schuch et al 2018) doi:10.21105/joss.00662  using pollutant inventories (Schuch et al., 2018) doi:10.30564/jasr.v1i1.347 . Functions process individual point emissions, line emissions area emissions pollutants available well methods incorporate alternative data Spatial distribution emissions satellite images (Gavidia-Calderon et. al, 2018) doi:10.1016/j.atmosenv.2018.09.026  openstreetmap data (Andrade et al, 2015) doi:10.3389/fenvs.2015.00009 .","code":""},{"path":[]},{"path":"https://atmoschem.github.io/EmissV/reference/EmissV-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"EmissV: Tools for Create Emissions for Air Quality Models — EmissV-package","text":"Maintainer: Daniel Schuch underschuch@gmail.com (ORCID) Authors: Sergio Ibarra-Espinosa sergio.ibarra@usp.br (ORCID)","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/areaSource.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution of emissions by area — areaSource","title":"Distribution of emissions by area — areaSource","text":"Calculate spatial distribution raster masked shape/model grid information.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/areaSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution of emissions by area — areaSource","text":"","code":"areaSource(s, r, grid = NA, name = \"\", as_frac = FALSE, verbose = TRUE)"},{"path":"https://atmoschem.github.io/EmissV/reference/areaSource.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Distribution of emissions by area — areaSource","text":"Data avaliable https://www.nesdis.noaa.gov/current-satellite-missions/currently-flying/defense-meteorological-satellite-program","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/areaSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution of emissions by area — areaSource","text":"s input shape object r input raster object grid grid output format name area name as_frac return fraction instead raster value verbose display additional data","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/areaSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution of emissions by area — areaSource","text":"raster object containing spatial distribution emissions","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/areaSource.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distribution of emissions by area — areaSource","text":"DMSP example data https://en.wikipedia.org/wiki/Defense_Meteorological_Satellite_Program","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/areaSource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution of emissions by area — areaSource","text":"","code":"shape  <- raster::shapefile(paste(system.file(\"extdata\", package = \"EmissV\"),                             \"/BR.shp\",sep=\"\"),verbose = FALSE) shape  <- shape[22,1] # subset for Sao Paulo - BR raster <- raster::raster(paste(system.file(\"extdata\", package = \"EmissV\"),                          \"/dmsp.tiff\",sep=\"\")) grid   <- gridInfo(paste(system.file(\"extdata\", package = \"EmissV\"),\"/wrfinput_d02\",sep=\"\")) #> Grid information from: /home/runner/work/_temp/Library/EmissV/extdata/wrfinput_d02  SP     <- areaSource(shape,raster,grid,name = \"SPMA\") #> processing SPMA area ...  #> fraction of SPMA area inside the domain = 0.473725382341265 # \\donttest{ raster::plot(SP,ylab=\"Lat\",xlab=\"Lon\",              main =\"Spatial Distribution by Lights for Sao Paulo - Brazil\")  # }"},{"path":"https://atmoschem.github.io/EmissV/reference/emission.html","id":null,"dir":"Reference","previous_headings":"","what":"Emissions in the format for atmospheric models — emission","title":"Emissions in the format for atmospheric models — emission","text":"Combine area sources total emissions model output","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/emission.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emissions in the format for atmospheric models — emission","text":"","code":"emission(   inventory = NULL,   grid,   mm = 1,   aerosol = FALSE,   check = TRUE,   total,   pol,   area,   plot = FALSE,   verbose = TRUE )"},{"path":"https://atmoschem.github.io/EmissV/reference/emission.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Emissions in the format for atmospheric models — emission","text":"matrix emission","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/emission.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Emissions in the format for atmospheric models — emission","text":"inventory inventory raster read grid grid information mm pollutant molar mass aerosol TRUE aerosols FALSE (defoult) gazes check TRUE (defoult) check negative NA values replace zero total list total emission pol pollutant name area list area sources matrix spatial distribution plot TRUE plot final emissions verbose display additional information","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/emission.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Emissions in the format for atmospheric models — emission","text":"vector emissions MOL / mk2 h gases ug / m2 s aerosols.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/emission.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Emissions in the format for atmospheric models — emission","text":"Inventory provided, firsts tree arguments used function. good practice use set_units(fe,your_unity), fe emission factory your_unity usually g/km emission factory list area must order defined vehicles total emission. just WRF-Chem suported now","code":""},{"path":[]},{"path":"https://atmoschem.github.io/EmissV/reference/emission.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Emissions in the format for atmospheric models — emission","text":"","code":"fleet  <- vehicles(example = TRUE) #> using a example of vehicles (DETRAN 2016 data and SP vahicle distribution): #>                              Category   Type Fuel        Use       SP      RJ #> Light Duty Vehicles Gasohol   LDV_E25    LDV  E25  41 [km/d] 11624342 2712343 #> Light Duty Vehicles Ethanol  LDV_E100    LDV E100  41 [km/d]   874627  204079 #> Light Duty Vehicles Flex        LDV_F    LDV FLEX  41 [km/d]  9845022 2297169 #> Diesel Trucks               TRUCKS_B5 TRUCKS   B5 110 [km/d]   710634  165814 #> Diesel Urban Busses           CBUS_B5    BUS   B5 165 [km/d]   792630  184947 #> Diesel Intercity Busses       MBUS_B5    BUS   B5 165 [km/d]    21865    5101 #> Gasohol Motorcycles          MOTO_E25   MOTO  E25 140 [km/d]  3227921  753180 #> Flex Motorcycles               MOTO_F   MOTO FLEX 140 [km/d]   235056   54846 #>                                  MG      PR      SC #> Light Duty Vehicles Gasohol 4371228 3036828 2029599 #> Light Duty Vehicles Ethanol  328895  228494  152709 #> Light Duty Vehicles Flex    3702131 2571986 1718932 #> Diesel Trucks                267227  185651  124076 #> Diesel Urban Busses          298061  207072  138392 #> Diesel Intercity Busses        8222    5712    3817 #> Gasohol Motorcycles         1213830  843285  563592 #> Flex Motorcycles              88390   61407   41040  EmissionFactors <- emissionFactor(example = TRUE) #> using a example emission factor (values calculated from CETESB 2015): #>                                       CO            PM #> Light Duty Vehicles Gasohol  1.75 [g/km] 0.0013 [g/km] #> Light Duty Vehicles Ethanol 10.04 [g/km] 0.0000 [g/km] #> Light Duty Vehicles Flex     0.39 [g/km] 0.0010 [g/km] #> Diesel Trucks                0.45 [g/km] 0.0612 [g/km] #> Diesel Urban Busses          0.77 [g/km] 0.1052 [g/km] #> Diesel Intercity Busses      1.48 [g/km] 0.1693 [g/km] #> Gasohol Motorcycles          1.61 [g/km] 0.0000 [g/km] #> Flex Motorcycles             0.75 [g/km] 0.0000 [g/km]  TOTAL  <- totalEmission(fleet,EmissionFactors,pol = c(\"CO\"),verbose = TRUE) #> Total of CO : 1676996.43578795 t year-1   grid   <- gridInfo(paste0(system.file(\"extdata\", package = \"EmissV\"),\"/wrfinput_d01\")) #> Grid information from: /home/runner/work/_temp/Library/EmissV/extdata/wrfinput_d01  shape  <- raster::shapefile(paste0(system.file(\"extdata\", package = \"EmissV\"),\"/BR.shp\")) raster <- raster::raster(paste0(system.file(\"extdata\", package = \"EmissV\"),\"/dmsp.tiff\"))  SP     <- areaSource(shape[22,1],raster,grid,name = \"SP\") #> processing SP area ...  #> fraction of SP area inside the domain = 0.944981686036935 RJ     <- areaSource(shape[17,1],raster,grid,name = \"RJ\") #> processing RJ area ...  #> fraction of RJ area inside the domain = 0.734040064556526  e_CO   <- emission(total = TOTAL,                    pol = \"CO\",                    area = list(SP = SP, RJ = RJ),                    grid = grid,                    mm = 28) #> calculating emissions for CO using molar mass = 28 ..."},{"path":"https://atmoschem.github.io/EmissV/reference/emissionFactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Tool to set-up emission factors — emissionFactor","title":"Tool to set-up emission factors — emissionFactor","text":"Return data frame emission multiple pollutants.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/emissionFactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool to set-up emission factors — emissionFactor","text":"","code":"emissionFactor(   ef,   poluttant = names(ef),   vnames = NA,   unit = \"g/km\",   example = FALSE,   verbose = TRUE )"},{"path":"https://atmoschem.github.io/EmissV/reference/emissionFactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool to set-up emission factors — emissionFactor","text":"ef list emission factors poluttant poluttant names vnames name vehicle categoy (optional) unit tring unit unit package, default \"g/km\" example TRUE diaplay simple example verbose display additional information","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/emissionFactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tool to set-up emission factors — emissionFactor","text":"emission factor data frame emission factor data.frame totalEmission function","code":""},{"path":[]},{"path":"https://atmoschem.github.io/EmissV/reference/emissionFactor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tool to set-up emission factors — emissionFactor","text":"","code":"EF <- emissionFactor(example = TRUE) #> using a example emission factor (values calculated from CETESB 2015): #>                                       CO            PM #> Light Duty Vehicles Gasohol  1.75 [g/km] 0.0013 [g/km] #> Light Duty Vehicles Ethanol 10.04 [g/km] 0.0000 [g/km] #> Light Duty Vehicles Flex     0.39 [g/km] 0.0010 [g/km] #> Diesel Trucks                0.45 [g/km] 0.0612 [g/km] #> Diesel Urban Busses          0.77 [g/km] 0.1052 [g/km] #> Diesel Intercity Busses      1.48 [g/km] 0.1693 [g/km] #> Gasohol Motorcycles          1.61 [g/km] 0.0000 [g/km] #> Flex Motorcycles             0.75 [g/km] 0.0000 [g/km]  # or the code for the same result EF <- emissionFactor(ef = list(CO = c(1.75,10.04,0.39,0.45,0.77,1.48,1.61,0.75),                                PM = c(0.0013,0.0,0.0010,0.0612,0.1052,0.1693,0.0,0.0)),                      vnames = c(\"Light Duty Vehicles Gasohol\",\"Light Duty Vehicles Ethanol\",                                 \"Light Duty Vehicles Flex\",\"Diesel Trucks\",\"Diesel Urban Busses\",                                 \"Diesel Intercity Busses\",\"Gasohol Motorcycles\",                                 \"Flex Motorcycles\")) #> Emission factors: #>                                       CO            PM #> Light Duty Vehicles Gasohol  1.75 [g/km] 0.0013 [g/km] #> Light Duty Vehicles Ethanol 10.04 [g/km] 0.0000 [g/km] #> Light Duty Vehicles Flex     0.39 [g/km] 0.0010 [g/km] #> Diesel Trucks                0.45 [g/km] 0.0612 [g/km] #> Diesel Urban Busses          0.77 [g/km] 0.1052 [g/km] #> Diesel Intercity Busses      1.48 [g/km] 0.1693 [g/km] #> Gasohol Motorcycles          1.61 [g/km] 0.0000 [g/km] #> Flex Motorcycles             0.75 [g/km] 0.0000 [g/km]"},{"path":"https://atmoschem.github.io/EmissV/reference/gridInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Read grid information from a NetCDF file — gridInfo","title":"Read grid information from a NetCDF file — gridInfo","text":"Return list containing information regular grid / domain","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/gridInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read grid information from a NetCDF file — gridInfo","text":"","code":"gridInfo(   file = file.choose(),   z = FALSE,   missing_time = \"1984-03-10\",   verbose = TRUE )"},{"path":"https://atmoschem.github.io/EmissV/reference/gridInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read grid information from a NetCDF file — gridInfo","text":"file file name/path wrfinput, wrfchemi geog_em file z TRUE read wrfinput vertical coordinades missing_time time variable Times missing verbose display additional information","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/gridInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read grid information from a NetCDF file — gridInfo","text":"list grid information air quality model","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/gridInfo.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read grid information from a NetCDF file — gridInfo","text":"just WRF-Chem suported now","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/gridInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read grid information from a NetCDF file — gridInfo","text":"","code":"grid_d1 <- gridInfo(paste(system.file(\"extdata\", package = \"EmissV\"),                                       \"/wrfinput_d01\",sep=\"\")) #> Grid information from: /home/runner/work/_temp/Library/EmissV/extdata/wrfinput_d01  grid_d2 <- gridInfo(paste(system.file(\"extdata\", package = \"EmissV\"),                                       \"/wrfinput_d02\",sep=\"\")) #> Grid information from: /home/runner/work/_temp/Library/EmissV/extdata/wrfinput_d02  grid_d3 <- gridInfo(paste(system.file(\"extdata\", package = \"EmissV\"),                                       \"/wrfinput_d03\",sep=\"\")) #> Grid information from: /home/runner/work/_temp/Library/EmissV/extdata/wrfinput_d03  names(grid_d1) #>  [1] \"File\"        \"Times\"       \"Lat\"         \"Lon\"         \"z\"           #>  [6] \"Horizontal\"  \"DX\"          \"xlim\"        \"ylim\"        \"Box\"         #> [11] \"boundary\"    \"polygon\"     \"map_proj\"    \"coords\"      \"geogrd.proj\" #> [16] \"r\"           \"grid\"        # for plot the shapes shape   <- raster::shapefile(paste0(system.file(\"extdata\", package = \"EmissV\"),                                                 \"/BR.shp\")) raster::plot(shape,xlim = c(-55,-40),ylim = c(-30,-15), main=\"3 nested domains\") axis(1); axis(2); box(); grid() lines(grid_d1$boundary, col = \"red\") text(grid_d1$xlim[2],grid_d1$Ylim[1],\"d1\",pos=4, offset = 0.5) lines(grid_d2$boundary, col = \"red\") text(grid_d2$xlim[2],grid_d2$Ylim[1],\"d2\",pos=4, offset = 0.5) lines(grid_d3$boundary, col = \"red\") text(grid_d3$xlim[1],grid_d3$Ylim[2],\"d3\",pos=2, offset = 0.0)"},{"path":"https://atmoschem.github.io/EmissV/reference/lineSource.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution of emissions by lines — lineSource","title":"Distribution of emissions by lines — lineSource","text":"Create emission distribution 'sp' 'sf' spatial lines data.frame spatial lines. 3 modes available create emission grid: - using gridInfo function output (defoult) - using patch \"wrfinput\" (output real.exe) file \"geo\" (output geog.exe) - \"sf\" (\"sp\") uses grid SpatialPolygons format variable column data.frame contains variable used emissions, defoult idstribution taken acount lench distribution lines grid cell output normalized.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/lineSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution of emissions by lines — lineSource","text":"","code":"lineSource(   s,   grid,   as_raster = FALSE,   type = \"info\",   gcol = 100,   grow = 100,   variable = \"length\",   verbose = TRUE )"},{"path":"https://atmoschem.github.io/EmissV/reference/lineSource.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Distribution of emissions by lines — lineSource","text":"OpenstreetMap data avaliable https://www.openstreetmap.org/ https://download.geofabrik.de/","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/lineSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution of emissions by lines — lineSource","text":"s SpatialLinesDataFrame SpatialLines object grid grid object grid information filename as_raster output format, TRUE raster, FALSE matrix type \"info\" (default), \"wrfinput\", \"geo\", \"sp\" \"sf\" grid type gcol grid points \"sp\" \"sf\" type grow grid points \"sp\" \"sf\" type variable variable use, default line length verbose display additional information","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/lineSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution of emissions by lines — lineSource","text":"raster object containing spatial distribution emissions","code":""},{"path":[]},{"path":"https://atmoschem.github.io/EmissV/reference/lineSource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution of emissions by lines — lineSource","text":"","code":"# \\donttest{ # loading a shapefile with osm data for sao paulo metropolitan area roads <- sf::st_read(paste0(system.file(\"extdata\",package=\"EmissV\"),\"/streets.shp\")) #> Reading layer `streets' from data source  #>   `/home/runner/work/_temp/Library/EmissV/extdata/streets.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 5216 features and 3 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -46.87612 ymin: -23.8155 xmax: -46.35414 ymax: -23.4179 #> Geodetic CRS:  +proj=longlat +datum=WGS84 +no_defs d3    <- gridInfo(paste0(system.file(\"extdata\", package = \"EmissV\"),\"/wrfinput_d03\")) #> Grid information from: /home/runner/work/_temp/Library/EmissV/extdata/wrfinput_d03   # calculating only for 2 streets roadLength <- lineSource(roads[1:2,],d3,as_raster=TRUE) #> using length as emission variable #> Number of lat points 51 #> Number of lon points 51  # to generate a quick plot raster::plot(roadLength,ylab=\"Lat\", xlab=\"Lon\",main=\"Length of roads\")  # lines(road_lines) # }"},{"path":"https://atmoschem.github.io/EmissV/reference/perfil.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal profile for emissions — perfil","title":"Temporal profile for emissions — perfil","text":"Set hourly profiles represents mean activity hour (local time) week. LDV Light Duty vehicles HDV Heavy Duty vehicles PC_JUNE_2012 passenger cars counted June 2012 PC_JUNE_2013 passenger cars counted June 2013 PC_JUNE_2014 passenger cars counted June 2014 LCV_JUNE_2012 light comercial vehicles counted June 2012 LCV_JUNE_2013 light comercial vehicles counted June 2013 LCV_JUNE_2014 light comercial vehicles counted June 2014 MC_JUNE_2012 motorcycles counted June 2012 MC_JUNE_2013 motorcycles counted June 2013 MC_JUNE_2014 motorcycles counted June 2014 HGV_JUNE_2012 Heavy good vehicles counted June 2012 HGV_JUNE_2013 Heavy good vehicles counted June 2013 HGV_JUNE_2014 Heavy good vehicles counted June 2014 PC_JANUARY_2012 passenger cars counted january 2012 PC_JANUARY_2013 passenger cars counted january 2013 PC_JANUARY_2014 passenger cars counted january 2014 LCV_JANUARY_2012 light comercial vehicles counted january 2012 LCV_JANUARY_2013 light comercial vehicles counted january 2013 LCV_JANUARY_2014 light comercial vehicles counted january 2014 MC_JANUARY_2012 Motorcycles counted january 2012 MC_JANUARY_2014 Motorcycles counted january 2014 HGV_JANUARY_2012 Heavy good vehicles counted january 2012 HGV_JANUARY_2013 Heavy good vehicles counted january 2013 HGV_JANUARY_2014 Heavy good vehicles counted january 2014 POW Power generation emission profile IND Industrial emission profile RES Residencial emission profile TRA Transport emission profile AGR Agriculture emission profile SHP Emission profile ships SLV Solvent use emission constant profile WBD Waste burning emisssion constant profile PC_nov_2018 passenger cars Janio Quadros November 2018 HGV_nov_2018 heavy good vehicles Janio Quadros November 2018 TOTAL_nov_2018 total vehicle Janio Quadros November 2018 PC_out_2018 passenger cars Anhanguera-Castello Branco October 2018 MC_out_2018 Motorcycles cars Anhanguera-Castello Branco October 2018","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/perfil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal profile for emissions — perfil","text":"","code":"data(perfil)"},{"path":"https://atmoschem.github.io/EmissV/reference/perfil.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Temporal profile for emissions — perfil","text":"list data frames activity hour weekday.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/perfil.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Temporal profile for emissions — perfil","text":"- Profiles 1 2 traffic count São Paulo city Perez Martínez et al (2014). - Profiles 3 25 comes traffic counted toll stations located São Paulo city, summer winters 2012, 2013 2014. - Profiles 26 33 different sectors Oliver et al (2003). - Profiles 34 36 volumetric mechanized traffic count Janio Quadros tunnel November 2018. - Profiles 37 38 volumetric mechanized traffic count Anhanguera-Castello Branco October 2018.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/perfil.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Temporal profile for emissions — perfil","text":"profile normalized days (balanced complete week) means diary_emission x profile = hourly_emission.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/perfil.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Temporal profile for emissions — perfil","text":"Pérez-Martínez, P. J., Miranda, R. M., Nogueira, T., Guardani, M. L., Fornaro, ., Ynoue, R., & Andrade, M. F. (2014). Emission factors air pollutants vehicles measured inside road tunnels São Paulo: case study comparison. International Journal Environmental Science Technology, 11(8), 2155-2168. Olivier, J., J. Peters, C. Granier, G. Pétron, J.F. Müller, S. Wallens, Present future surface emissions atmospheric compounds, POET Report #2, EU project EVK2-1999-00011, 2003.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/perfil.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal profile for emissions — perfil","text":"","code":"# load the data data(perfil) # \\donttest{ # function to simple view plot.perfil <- function(per = perfil$LDV, text=\"\", color = \"#0000FFBB\"){   plot(per[,1],ty = \"l\", ylim = range(per),axe = FALSE,        xlab = \"hour\",ylab = \"Intensity\",main = text,col=color)   for(i in 2:7){     lines(per[,i],col = color)   }   for(i in 1:7){     points(per[,i],col = \"black\", pch = 20)   }   axis(1,at=0.5+c(0,6,12,18,24),labels = c(\"00:00\",\"06:00\",\"12:00\",\"18:00\",\"00:00\"))   axis(2)   box() } # \\donttest{ # view all profiles in perfil data for(i in 1:length(names(perfil))){   cat(paste(\"profile\",i,names(perfil)[i],\"\\n\"))   plot.perfil(perfil[[i]],names(perfil)[i]) } #> profile 1 LDV   #> profile 2 HDV   #> profile 3 PC_JUNE_2012   #> profile 4 PC_JUNE_2013   #> profile 5 PC_JUNE_2014   #> profile 6 LCV_JUNE_2012   #> profile 7 LCV_JUNE_2013   #> profile 8 LCV_JUNE_2014   #> profile 9 MC_JUNE_2012   #> profile 10 MC_JUNE_2013   #> profile 11 MC_JUNE_2014   #> profile 12 HGV_JUNE_2012   #> profile 13 HGV_JUNE_2013   #> profile 14 HGV_JUNE_2014   #> profile 15 PC_JANUARY_2012   #> profile 16 PC_JANUARY_2013   #> profile 17 PC_JANUARY_2014   #> profile 18 LCV_JANUARY_2012   #> profile 19 LCV_JANUARY_2013   #> profile 20 LCV_JANUARY_2014   #> profile 21 MC_JANUARY_2012   #> profile 22 MC_JANUARY_2014   #> profile 23 HGV_JANUARY_2012   #> profile 24 HGV_JANUARY_2013   #> profile 25 HGV_JANUARY_2014   #> profile 26 POW   #> profile 27 IND   #> profile 28 RES   #> profile 29 TRA   #> profile 30 AGR   #> profile 31 SHP   #> profile 32 SLV   #> profile 33 WBD   #> profile 34 PC_nov_2018   #> profile 35 HGV_nov_2018   #> profile 36 TOTAL_nov_2018   #> profile 37 PC_out_2018   #> profile 38 MC_out_2018   # } # }"},{"path":"https://atmoschem.github.io/EmissV/reference/plumeRise.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate plume rise height. — plumeRise","title":"Calculate plume rise height. — plumeRise","text":"Calculate maximum height rise based Brigs (1975), height calculated using different formulations depending stability wind conditions.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/plumeRise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate plume rise height. — plumeRise","text":"","code":"plumeRise(df, imax = 10, ermax = 1/100, Hmax = TRUE, verbose = TRUE)"},{"path":"https://atmoschem.github.io/EmissV/reference/plumeRise.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Calculate plume rise height. — plumeRise","text":"data.frame input, rise (m) effective higt (m)","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/plumeRise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate plume rise height. — plumeRise","text":"df data.frame micrometeorological emission data imax maximum number iteractions ermax maximum error Hmax use weil limit plume rise, see details verbose display additional information","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/plumeRise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate plume rise height. — plumeRise","text":"data.frame effective height emissions pointSource function","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/plumeRise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate plume rise height. — plumeRise","text":"input data.frame must contains folloging colluns: - z: height emission (m) - r: source raius (m) - Ve: emission velocity (m/s) - Te: emission temperature (K) - ws: wind speed (m/s) - Temp: ambient temperature (K) - h: height Atmospheric Boundary Layer-ABL (m) - L: Monin-Obuhkov Lench (m) - dtdz: lapse ration potential temperature, used stable ABL (K/m) - Ustar: atriction velocity, used neutral ABL (m/s) - Wstar: scale convectie velocity, used convective ABL (m/s) Addcitionaly combination ws, Wstar Ustar can produce inacurate results, Weil (1979) propose geometric limit 0.62 * (h - Hs) rise value.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/plumeRise.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate plume rise height. — plumeRise","text":"plume rise formulas Brigs (1975):\"Brigs, G. . Plume rise predictions, Lectures Air Pollution Environmental Impact Analyses. Amer. Meteor. Soc. p. 59-111, 1975.\" Arya 1999: \"Arya, S.P., 1999, Air Pollution Meteorology Dispersion, Oxford University Press, New York, 310 p.\" limits Weil (1979): \"WEIL, J.C. Assessmet plume rise dispersion models using LIDAR data, PPSP-MP-24. Prepared Environmental Center, Martin Marietta Corporation, Maryland Department Natural Resources. 1979.\" example data chimney Candiota thermoelectric powerplant Arabage et al (2006) \"Arabage, M. C.; Degrazia, G. .; Moraes O. L. Simulação euleriana da dispersão local da pluma de poluente atmosférico de Candiota-RS. Revista Brasileira de Meteorologia, v.21, n.2, p. 153-160, 2006.\"","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/plumeRise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate plume rise height. — plumeRise","text":"","code":"candiota <- matrix(c(150,1,20,420,3.11,273.15 + 3.16,200,-34.86,3.11,0.33,                      150,1,20,420,3.81,273.15 + 4.69,300,-34.83,3.81,0.40,                      150,1,20,420,3.23,273.15 + 5.53,400,-24.43,3.23,0.48,                      150,1,20,420,3.47,273.15 + 6.41,500,-15.15,3.48,0.52,                      150,1,20,420,3.37,273.15 + 6.35,600, -8.85,3.37,2.30,                      150,1,20,420,3.69,273.15 + 5.93,800,-10.08,3.69,2.80,                      150,1,20,420,3.59,273.15 + 6.08,800, -7.23,3.49,1.57,                      150,1,20,420,4.14,273.15 + 6.53,900,-28.12,4.14,0.97),                      ncol = 10, byrow = TRUE) candiota <- data.frame(candiota) names(candiota) <- c(\"z\",\"r\",\"Ve\",\"Te\",\"ws\",\"Temp\",\"h\",\"L\",\"Ustar\",\"Wstar\") row.names(candiota) <- c(\"08:00\",\"09:00\",paste(10:15,\":00\",sep=\"\")) candiota <- plumeRise(candiota,Hmax = TRUE) #> convective, h/L = -5.7372346528973  #> using weil max= 31  #> convective, h/L = -8.61326442721792  #> strong convective, h/L = -16.3733115022513  #> using weil max= 155  #> strong convective, h/L = -33.003300330033  #> using weil max= 217  #> strong convective, h/L = -67.7966101694915  #> strong convective, h/L = -79.3650793650794  #> strong convective, h/L = -110.650069156293  #> strong convective, h/L = -32.0056899004267  print(candiota) #>         z r Ve  Te   ws   Temp   h      L Ustar Wstar     rise       He #> 08:00 150 1 20 420 3.11 276.31 200 -34.86  3.11  0.33  31.0000 181.0000 #> 09:00 150 1 20 420 3.81 277.84 300 -34.83  3.81  0.40  41.5831 191.5831 #> 10:00 150 1 20 420 3.23 278.68 400 -24.43  3.23  0.48 155.0000 305.0000 #> 11:00 150 1 20 420 3.47 279.56 500 -15.15  3.48  0.52 217.0000 367.0000 #> 12:00 150 1 20 420 3.37 279.50 600  -8.85  3.37  2.30 121.4376 271.4376 #> 13:00 150 1 20 420 3.69 279.08 800 -10.08  3.69  2.80 102.0828 252.0828 #> 14:00 150 1 20 420 3.59 279.23 800  -7.23  3.49  1.57 207.6558 357.6558 #> 15:00 150 1 20 420 4.14 279.68 900 -28.12  4.14  0.97 355.4518 505.4518"},{"path":"https://atmoschem.github.io/EmissV/reference/pointSource.html","id":null,"dir":"Reference","previous_headings":"","what":"Emissions from point sources — pointSource","title":"Emissions from point sources — pointSource","text":"Transform set points grinded output","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/pointSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emissions from point sources — pointSource","text":"","code":"pointSource(emissions, grid, verbose = TRUE)"},{"path":"https://atmoschem.github.io/EmissV/reference/pointSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Emissions from point sources — pointSource","text":"emissions list points grid grid object grid information verbose display additional information","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/pointSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Emissions from point sources — pointSource","text":"raster","code":""},{"path":[]},{"path":"https://atmoschem.github.io/EmissV/reference/pointSource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Emissions from point sources — pointSource","text":"","code":"d1 <- gridInfo(paste(system.file(\"extdata\", package = \"EmissV\"),\"/wrfinput_d01\",sep=\"\")) #> Grid information from: /home/runner/work/_temp/Library/EmissV/extdata/wrfinput_d01   p = data.frame(lat      = c(-22,-22,-23.5),                lon      = c(-46,-48,-47  ),                z        = c(0  ,  0,  0  ),                emission = c(666,444,111  ) )  p_emissions <- pointSource(emissions = p, grid = d1) #> grid position lat= -22.010806627171 lon= -46.0152584808041  #> grid position lat= -22.010806627171 lon= -47.9944115841027  #> grid position lat= -23.4723500487625 lon= -47.0048350324534  # \\donttest{ raster::plot(p_emissions,ylab=\"Lat\", xlab=\"Lon\",              main = \"3 point sources for domain d1\")  # }"},{"path":"https://atmoschem.github.io/EmissV/reference/rasterSource.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution of emissions by a georeferenced image — rasterSource","title":"Distribution of emissions by a georeferenced image — rasterSource","text":"Calculate spatial distribution raster","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/rasterSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution of emissions by a georeferenced image — rasterSource","text":"","code":"rasterSource(r, grid, nlevels = \"all\", conservative = TRUE, verbose = TRUE)"},{"path":"https://atmoschem.github.io/EmissV/reference/rasterSource.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Distribution of emissions by a georeferenced image — rasterSource","text":"Exemple data low resolution cutting image persistent lights Defense Meteorological Satellite Program (DMSP) https://pt.wikipedia.org/wiki/Defense_Meteorological_Satellite_Program Data avaliable https://www.nesdis.noaa.gov/current-satellite-missions/currently-flying/defense-meteorological-satellite-program","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/rasterSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution of emissions by a georeferenced image — rasterSource","text":"r input raster object grid grid object grid information nlevels number vertical levels emission array conservative TRUE (default) conserve total mass, FALSE conserve flux verbose display additional information","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/rasterSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribution of emissions by a georeferenced image — rasterSource","text":"Returns matrix","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/rasterSource.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distribution of emissions by a georeferenced image — rasterSource","text":"DMSP example data https://en.wikipedia.org/wiki/Defense_Meteorological_Satellite_Program","code":""},{"path":[]},{"path":"https://atmoschem.github.io/EmissV/reference/rasterSource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution of emissions by a georeferenced image — rasterSource","text":"","code":"grid  <- gridInfo(paste(system.file(\"extdata\", package = \"EmissV\"),\"/wrfinput_d01\",sep=\"\")) #> Grid information from: /home/runner/work/_temp/Library/EmissV/extdata/wrfinput_d01  x     <- raster::raster(paste(system.file(\"extdata\", package = \"EmissV\"),\"/dmsp.tiff\",sep=\"\")) test  <- rasterSource(x, grid) #> Grid output: 99 columns 93 rows image(test, axe = FALSE, main = \"Spatial distribution by Persistent Nocturnal Lights from DMSP\")"},{"path":"https://atmoschem.github.io/EmissV/reference/read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read NetCDF data from global inventories — read","title":"Read NetCDF data from global inventories — read","text":"Read data global inventories. Several files can read produce one emission output /can splitted several species","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read NetCDF data from global inventories — read","text":"","code":"read(   file = file.choose(),   version = NA,   coef = rep(1, length(file)),   spec = NULL,   year = 1,   month = 1,   hour = 1,   categories,   reproject = TRUE,   as_raster = TRUE,   skip_missing = FALSE,   verbose = TRUE )"},{"path":"https://atmoschem.github.io/EmissV/reference/read.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Read NetCDF data from global inventories — read","text":"Read abbout EDGAR http://edgar.jrc.ec.europa.eu MACCITY http://accent.aero.jussieu.fr/MACC_metadata.php info EDGARv8.1 https://edgar.jrc.ec.europa.eu/dataset_ap81 short live species https://edgar.jrc.ec.europa.eu/dataset_ghg80 GHG","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read NetCDF data from global inventories — read","text":"file file name names (variables summed) version Character; One  following: coef coefficients merge different sources (file) one emission spec numeric speciation vector split emission different species year scenario index (GAINS VULCAN-y) month desired month inventory (MACCITY, ODIAC, EDGARv8m, GEMSm) hour hour emission (ACES VULCAN-h) categories considered categories (MACCITY/GAINS variable names), empty use reproject project output \"+proj=longlat\" needed emission function (VULCAN ACES) as_raster return raster (default) matrix (units) skip_missing return zero emission warning missing files/variables verbose display additional information","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read NetCDF data from global inventories — read","text":"Matrix raster","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/read.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read NetCDF data from global inventories — read","text":"EDGAR (versions), GAINS, RCP MACCTITY, please use flux (kg m-2 s-1) NetCDF file.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/read.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read NetCDF data from global inventories — read","text":"Janssens-Maenhout, G., Dentener, F., Van Aardenne, J., Monni, S., Pagliari, V., Orlandini, L., ... & Wankmüller, R. (2012). EDGAR-HTAP: harmonized gridded air pollution emission dataset based national inventories. European Commission Joint Research Centre Institute Environment Sustainability. JRC 68434 UR 25229 EUR 25229, ISBN 978-92-79-23123-0. Lamarque, J.-F., Bond, T. C., Eyring, V., Granier, C., Heil, ., Klimont, Z., Lee, D., Liousse, C., Mieville, ., Owen, B., Schultz, M. G., Shindell, D., Smith, S. J., Stehfest, E., Van Aardenne, J., Cooper, O. R., Kainuma, M., Mahowald, N., McConnell, J. R., Naik, V., Riahi, K., van Vuuren, D. P.: Historical (1850-2000) gridded anthropogenic biomass burning emissions reactive gases aerosols: methodology application, Atmos. Chem. Phys., 10, 7017-7039, doi:10.5194/acp-10-7017-2010, 2010. Z Klimont, S. J. Smith J Cofala last decade global anthropogenic sulfur dioxide: 2000–2011 emissions Environmental Research Letters 8, 014003, 2013 Gurney, Kevin R., Jianming Liang, Risa Patarasuk, Yang Song, Jianhua Huang, Geoffrey Roest (2019) Vulcan Version 3.0 High-Resolution Fossil Fuel CO2 Emissions United States. Nature Scientific Data.","code":""},{"path":[]},{"path":"https://atmoschem.github.io/EmissV/reference/read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read NetCDF data from global inventories — read","text":"","code":"# \\donttest{ folder <- file.path(tempdir(), \"EDGARv8.1\") dir.create(folder)  url     <- \"https://jeodpp.jrc.ec.europa.eu/ftp/jrc-opendata/EDGAR/datasets\" dataset <- \"v81_FT2022_AP_new/NOx/TOTALS/flx_nc\" file    <- \"v8.1_FT2022_AP_NOx_2022_TOTALS_flx_nc.zip\"  download.file(paste0(url,\"/\",dataset,\"/\",file), paste0(folder,\"/\",file))  unzip(paste0(folder,\"/\",file),exdir = folder)  nox  <- read(file    = dir(path=folder, pattern=\"flx\\\\.nc\", full.names=TRUE),              version = \"EDGARv8\",              spec    = c(E_NO  = 0.9 ,   # 90% of NOx is NO                          E_NO2 = 0.1 ))  # 10% of NOx is NO2 #> reading EDGARv8 emissions, output unit is g m-2 s-1 ... #> from /tmp/Rtmpld9Z08/EDGARv8.1/v8.1_FT2022_AP_NOx_2022_TOTALS_flx.nc fluxes x 1.000000  #> using the following speciation: #> E_NO = 0.9 #> E_NO2 = 0.1 # creating a color scale cor <- colorRampPalette(colors = c(c(\"#031057\", \"#0522FC\",                                      \"#7E0AFA\", \"#EF0AFF\",                                      \"#FFA530\", \"#FFF957\"))) raster::plot(nox$E_NO, xlab=\"Latitude\", ylab=\"Longitude\",              col = cor(12),zlim = c(-6.5e-7,1.4e-5),              main=\"TOTAL NO emissions from EDGARv8.1 (in g / m2 s)\")   d1  <- gridInfo(paste(system.file(\"extdata\", package = \"EmissV\"),\"/wrfinput_d01\",sep=\"\")) #> Grid information from: /home/runner/work/_temp/Library/EmissV/extdata/wrfinput_d01  NO  <- emission(grid = d1, inventory = nox$E_NO, pol = \"NO\", mm = 30.01,plot = TRUE) #> Using raster from inventory for NO ... #> Grid output: 99 columns 93 rows  # }"},{"path":"https://atmoschem.github.io/EmissV/reference/speciation.html","id":null,"dir":"Reference","previous_headings":"","what":"Speciation of emissions in different compounds — speciation","title":"Speciation of emissions in different compounds — speciation","text":"Distribute total mass estimated emissions model species.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/speciation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speciation of emissions in different compounds — speciation","text":"","code":"speciation(total, spec = NULL, verbose = TRUE)"},{"path":"https://atmoschem.github.io/EmissV/reference/speciation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Speciation of emissions in different compounds — speciation","text":"total emissions totalEmissions spec numeric speciation vector species verbose display additional information","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/speciation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Speciation of emissions in different compounds — speciation","text":"Return list daily total emission interest area (cityes, states, countries, etc).","code":""},{"path":[]},{"path":"https://atmoschem.github.io/EmissV/reference/speciation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Speciation of emissions in different compounds — speciation","text":"","code":"veic <- vehicles(example = TRUE) #> using a example of vehicles (DETRAN 2016 data and SP vahicle distribution): #>                              Category   Type Fuel        Use       SP      RJ #> Light Duty Vehicles Gasohol   LDV_E25    LDV  E25  41 [km/d] 11624342 2712343 #> Light Duty Vehicles Ethanol  LDV_E100    LDV E100  41 [km/d]   874627  204079 #> Light Duty Vehicles Flex        LDV_F    LDV FLEX  41 [km/d]  9845022 2297169 #> Diesel Trucks               TRUCKS_B5 TRUCKS   B5 110 [km/d]   710634  165814 #> Diesel Urban Busses           CBUS_B5    BUS   B5 165 [km/d]   792630  184947 #> Diesel Intercity Busses       MBUS_B5    BUS   B5 165 [km/d]    21865    5101 #> Gasohol Motorcycles          MOTO_E25   MOTO  E25 140 [km/d]  3227921  753180 #> Flex Motorcycles               MOTO_F   MOTO FLEX 140 [km/d]   235056   54846 #>                                  MG      PR      SC #> Light Duty Vehicles Gasohol 4371228 3036828 2029599 #> Light Duty Vehicles Ethanol  328895  228494  152709 #> Light Duty Vehicles Flex    3702131 2571986 1718932 #> Diesel Trucks                267227  185651  124076 #> Diesel Urban Busses          298061  207072  138392 #> Diesel Intercity Busses        8222    5712    3817 #> Gasohol Motorcycles         1213830  843285  563592 #> Flex Motorcycles              88390   61407   41040 EmissionFactors <- emissionFactor(example = TRUE) #> using a example emission factor (values calculated from CETESB 2015): #>                                       CO            PM #> Light Duty Vehicles Gasohol  1.75 [g/km] 0.0013 [g/km] #> Light Duty Vehicles Ethanol 10.04 [g/km] 0.0000 [g/km] #> Light Duty Vehicles Flex     0.39 [g/km] 0.0010 [g/km] #> Diesel Trucks                0.45 [g/km] 0.0612 [g/km] #> Diesel Urban Busses          0.77 [g/km] 0.1052 [g/km] #> Diesel Intercity Busses      1.48 [g/km] 0.1693 [g/km] #> Gasohol Motorcycles          1.61 [g/km] 0.0000 [g/km] #> Flex Motorcycles             0.75 [g/km] 0.0000 [g/km] TOTAL <- totalEmission(veic,EmissionFactors,pol = \"PM\") #> Total of PM : 15071.8124616163 t year-1  pm_iag <- c(E_PM25I = 0.0509200,             E_PM25J = 0.1527600,             E_ECI   = 0.1196620,             E_ECJ   = 0.0076380,             E_ORGI  = 0.0534660,             E_ORGJ  = 0.2279340,             E_SO4I  = 0.0063784,             E_SO4J  = 0.0405216,             E_NO3J  = 0.0024656,             E_NO3I  = 0.0082544,             E_PM10  = 0.3300000) PM <- speciation(TOTAL,pm_iag)"},{"path":"https://atmoschem.github.io/EmissV/reference/species.html","id":null,"dir":"Reference","previous_headings":"","what":"Species mapping tables — species","title":"Species mapping tables — species","text":"Set tables speciation: voc_radm2_mic Volatile organic compounds RADM2 voc_cbmz_mic Volatile organic compounds CBMZ voc_moz_mic Volatile organic compounds MOZART voc_saprc99_mic volatile organic compounds SAPRC99 veicularvoc_radm2_iag Vehicular volatile organic compounds RADM2 (MOL) veicularvoc_cbmz_iag Vehicular volatile organic compounds CBMZ (MOL) veicularvoc_moz_iag Vehicular volatile organic compounds MOZART (MOL) veicularvoc_saprc99_iag Vehicular volatile organic compounds SAPRC99 (MOL) pm_madesorgan_iag Particulate matter made/sorgan pm25_madesorgan_iag Fine particulate matter made/sorgan nox_iag Nox split Perez Martínez et al (2014) nox_bcom Nox split usin Ntziachristos Zamaras (2016) voc_radm2_edgar432 Volatile organic compounds species EDGAR 4.3.2 RADM2 (MOL) voc_moz_edgar432 Volatile organic compounds species EDGAR 4.3.2 MOZART (MOL) - Volatile organic compounds species map 1 4 Li et al (2014) taken account several sources pollutants. - Volatile organic compounds vehicular activity species map 5 8 fuel emission process USP-IAG tunel experiments (Rafee et al., 2017) emited process exhaust (exhaust pipe), liquid (carter evaporative) vapor (fuel transfer operations). - Particulate matter speciesmap made/sorgan emissions 9 10. - Nox split using Perez Martínez et al (2014) data (11). - Nox split using mean Ntziachristos Zamaras (2016) data (12). - Volatile organic compounds species map 13 14 corespondence EDGAR 4.3.2 VOC specialization RADM2 MOZART.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species mapping tables — species","text":"","code":"data(species)"},{"path":"https://atmoschem.github.io/EmissV/reference/species.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Species mapping tables — species","text":"List numeric vectors 'names()' species values species.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/species.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Species mapping tables — species","text":"iag-voc: estimating emissions NMHC, used speciation presented (RAFEE et al., 2017). speciation based tunnel measurements São Paulo, depends type fuel (E25, E100 B5) provides mass chemical compound mol/g. speciation splits NMHC evaporative, liquid exhaust emissions E25, E100 B5, minimum compounds required Carbon Bond Mechanism (CBMZ) (ZAVERI; PETERS, 1999). Atmospheric simulations using pollutants Brazil resulted good agreement observations (ANDRADE et al., 2015). iag-pm: data tunnel experiments São Paulo Perez Martínez et al (2014) iag-nox: common NOx split São Paulo Metropolitan area. bcom-nox: mean Ntziachristos Zamaras (2016) data. mic: Li et al (2014). edgar: Edgar 4.3.2 emissions Crippa et al. (2018).","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/species.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Species mapping tables — species","text":"units mass ratio (mass/mass) MOL (MOL), last case change default 'mm' 'emission()' function.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/species.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Species mapping tables — species","text":"Li, M., Zhang, Q., Streets, D. G., , K. B., Cheng, Y. F., Emmons, L. K., ... & Su, H. (2014). Mapping Asian anthropogenic emissions non-methane volatile organic compounds multiple chemical mechanisms. Atmos. Chem. Phys, 14(11), 5617-5638. Huang, G., Brook, R., Crippa, M., Janssens-Maenhout, G., Schieberle, C., Dore, C., ... & Friedrich, R. (2017). Speciation anthropogenic emissions non-methane volatile organic compounds: global gridded data set 1970–2012. Atmospheric Chemistry Physics, 17(12), 7683. Abou Rafee, S. ., Martins, L. D., Kawashima, . B., Almeida, D. S., Morais, M. V. B., Souza, R. V. ., Oliveira, M. B. L., Souza, R. . F., Medeiros, . S. S., Urbina, V., Freitas, E. D., Martin, S. T., Martins, J. .: Contributions mobile, stationary biogenic sources air pollution Amazon rainforest: numerical study WRF-Chem model, Atmos. Chem. Phys., 17, 7977-7995, https://doi.org/10.5194/acp-17-7977-2017, 2017. Martins, L. D., Andrade, M. F. D., Freitas, E., Pretto, ., Gatti, L. V., Junior, O. M. ., et al. (2006). Emission factors gas-powered vehicles traveling road tunnels Sao Paulo, Brazil. Environ. Sci. Technol. 40, 6722–6729. doi: 10.1021/es052441u Pérez-Martínez, P. J., Miranda, R. M., Nogueira, T., Guardani, M. L., Fornaro, ., Ynoue, R., & Andrade, M. F. (2014). Emission factors air pollutants vehicles measured inside road tunnels São Paulo: case study comparison. International Journal Environmental Science Technology, 11(8), 2155-2168. ANDRADE, M. d. F. et al. Air quality forecasting system southeastern brazil. Frontiers Environmental Science, Frontiers, v. 3, p. 1–12, 2015. Crippa, M., Guizzardi, D., Muntean, M., Schaaf, E., Dentener, F., Aardenne, J. . V., ... & Janssens-Maenhout, G. (2018). Gridded emissions air pollutants period 1970–2012 within EDGAR v4.3.2. Earth System Science Data, 10(4), 1987-2013.","code":""},{"path":[]},{"path":"https://atmoschem.github.io/EmissV/reference/species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species mapping tables — species","text":"","code":"# load the mapping tables data(species) # names of eath mapping tables for(i in 1:length(names(species)))     cat(paste0(\"specie map \",i,\" \",names(species)[i],\"\\n\")) #> specie map 1 voc_radm2_mic #> specie map 2 voc_cbmz_mic #> specie map 3 voc_moz_mic #> specie map 4 voc_saprc99_mic #> specie map 5 veicularvoc_radm2_iag #> specie map 6 veicularvoc_cbmz_iag #> specie map 7 veicularvoc_cb05_iag #> specie map 8 veicularvoc_moz_iag #> specie map 9 pm_madesorgan_iag #> specie map 10 pm25_madesorgan_iag #> specie map 11 nox_iag #> specie map 12 nox_bcom #> specie map 13 voc_radm2_edgar432 #> specie map 14 voc_moze_dgar432 # names of species contained in the (first) mapping table names(species[[1]]) #>  [1] \"E_ALD\"    \"E_KET\"    \"E_TOL\"    \"E_XYL\"    \"E_OLT\"    \"E_OLI\"    #>  [7] \"E_OL2\"    \"E_HCHO\"   \"E_ETH\"    \"E_CH3OH\"  \"E_C2H5OH\" \"E_HC3\"    #> [13] \"E_HC5\"    # The first mapping table / species and values species[1] #> $voc_radm2_mic #>       E_ALD       E_KET       E_TOL       E_XYL       E_OLT       E_OLI  #> 0.014285714 0.011038961 0.102272727 0.102272727 0.024675325 0.024675325  #>       E_OL2      E_HCHO       E_ETH     E_CH3OH    E_C2H5OH       E_HC3  #> 0.047402597 0.007142857 0.050649351 0.002597403 0.035064935 0.074025974  #>       E_HC5  #> 0.503896104  #>"},{"path":"https://atmoschem.github.io/EmissV/reference/totalEmission.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate total emissions — totalEmission","title":"Calculate total emissions — totalEmission","text":"Caculate total emission : Emission(pollutant) = sum( Vehicles(n) * Km_day_use(n) * Emission_Factor(n,pollutant) ) n type veicle","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/totalEmission.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate total emissions — totalEmission","text":"","code":"totalEmission(v, ef, pol, verbose = TRUE)"},{"path":"https://atmoschem.github.io/EmissV/reference/totalEmission.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate total emissions — totalEmission","text":"v dataframe vehicle data ef emission factor pol pollutant name ef verbose display additional information","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/totalEmission.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate total emissions — totalEmission","text":"Return list daily total emission interest area (cityes, states, countries, etc).","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/totalEmission.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate total emissions — totalEmission","text":"units (set_units(\"value\",unit) recomended unit g/d) must used make ef data.frame","code":""},{"path":[]},{"path":"https://atmoschem.github.io/EmissV/reference/totalEmission.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate total emissions — totalEmission","text":"","code":"veic <- vehicles(example = TRUE) #> using a example of vehicles (DETRAN 2016 data and SP vahicle distribution): #>                              Category   Type Fuel        Use       SP      RJ #> Light Duty Vehicles Gasohol   LDV_E25    LDV  E25  41 [km/d] 11624342 2712343 #> Light Duty Vehicles Ethanol  LDV_E100    LDV E100  41 [km/d]   874627  204079 #> Light Duty Vehicles Flex        LDV_F    LDV FLEX  41 [km/d]  9845022 2297169 #> Diesel Trucks               TRUCKS_B5 TRUCKS   B5 110 [km/d]   710634  165814 #> Diesel Urban Busses           CBUS_B5    BUS   B5 165 [km/d]   792630  184947 #> Diesel Intercity Busses       MBUS_B5    BUS   B5 165 [km/d]    21865    5101 #> Gasohol Motorcycles          MOTO_E25   MOTO  E25 140 [km/d]  3227921  753180 #> Flex Motorcycles               MOTO_F   MOTO FLEX 140 [km/d]   235056   54846 #>                                  MG      PR      SC #> Light Duty Vehicles Gasohol 4371228 3036828 2029599 #> Light Duty Vehicles Ethanol  328895  228494  152709 #> Light Duty Vehicles Flex    3702131 2571986 1718932 #> Diesel Trucks                267227  185651  124076 #> Diesel Urban Busses          298061  207072  138392 #> Diesel Intercity Busses        8222    5712    3817 #> Gasohol Motorcycles         1213830  843285  563592 #> Flex Motorcycles              88390   61407   41040  EmissionFactors <- emissionFactor(example = TRUE) #> using a example emission factor (values calculated from CETESB 2015): #>                                       CO            PM #> Light Duty Vehicles Gasohol  1.75 [g/km] 0.0013 [g/km] #> Light Duty Vehicles Ethanol 10.04 [g/km] 0.0000 [g/km] #> Light Duty Vehicles Flex     0.39 [g/km] 0.0010 [g/km] #> Diesel Trucks                0.45 [g/km] 0.0612 [g/km] #> Diesel Urban Busses          0.77 [g/km] 0.1052 [g/km] #> Diesel Intercity Busses      1.48 [g/km] 0.1693 [g/km] #> Gasohol Motorcycles          1.61 [g/km] 0.0000 [g/km] #> Flex Motorcycles             0.75 [g/km] 0.0000 [g/km]  TOTAL <- totalEmission(veic,EmissionFactors,pol = c(\"CO\",\"PM\")) #> Total of CO : 1676996.43578795 t year-1  #> Total of PM : 15071.8124616163 t year-1"},{"path":"https://atmoschem.github.io/EmissV/reference/vehicles.html","id":null,"dir":"Reference","previous_headings":"","what":"Tool to set-up vehicle data table — vehicles","title":"Tool to set-up vehicle data table — vehicles","text":"Return data frame 4 columns (vehicle category, type, fuel avarage kilometers driven) aditional column number vehicles interest area (cityes, states, countries, etc). Average daily kilometres driven defined vehicle type: - LDV (Light duty Vehicles) 41 km / day - TRUCKS (Trucks) 110 km / day - BUS (Busses) 165 km / day - MOTO (motorcycles vehicles) 140 km / day number vehicles defined distribution vehicles vehicle classs total number vehicles area.","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/vehicles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool to set-up vehicle data table — vehicles","text":"","code":"vehicles(   total_v,   area_name = names(total_v),   distribution,   type,   category = NA,   fuel = NA,   vnames = NA,   example = FALSE,   verbose = TRUE )"},{"path":"https://atmoschem.github.io/EmissV/reference/vehicles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool to set-up vehicle data table — vehicles","text":"total_v total vehicles area (area length) area_name area names (area length) distribution distribution vehicles vehicle class type type vehicle vehicle class (distribution length) category category name (distribution length / NA) fuel fuel type vehicle class (distribution length / NA) vnames name vehicle class (distribution length / NA) example simple example verbose display additional information","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/vehicles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tool to set-up vehicle data table — vehicles","text":"fleet distribution data.frame totalEmission function","code":""},{"path":"https://atmoschem.github.io/EmissV/reference/vehicles.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tool to set-up vehicle data table — vehicles","text":"total_v area_name must length. distribution, type, category (used), fuel (used) vnames (used) must length.","code":""},{"path":[]},{"path":"https://atmoschem.github.io/EmissV/reference/vehicles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tool to set-up vehicle data table — vehicles","text":"","code":"fleet <- vehicles(example = TRUE) #> using a example of vehicles (DETRAN 2016 data and SP vahicle distribution): #>                              Category   Type Fuel        Use       SP      RJ #> Light Duty Vehicles Gasohol   LDV_E25    LDV  E25  41 [km/d] 11624342 2712343 #> Light Duty Vehicles Ethanol  LDV_E100    LDV E100  41 [km/d]   874627  204079 #> Light Duty Vehicles Flex        LDV_F    LDV FLEX  41 [km/d]  9845022 2297169 #> Diesel Trucks               TRUCKS_B5 TRUCKS   B5 110 [km/d]   710634  165814 #> Diesel Urban Busses           CBUS_B5    BUS   B5 165 [km/d]   792630  184947 #> Diesel Intercity Busses       MBUS_B5    BUS   B5 165 [km/d]    21865    5101 #> Gasohol Motorcycles          MOTO_E25   MOTO  E25 140 [km/d]  3227921  753180 #> Flex Motorcycles               MOTO_F   MOTO FLEX 140 [km/d]   235056   54846 #>                                  MG      PR      SC #> Light Duty Vehicles Gasohol 4371228 3036828 2029599 #> Light Duty Vehicles Ethanol  328895  228494  152709 #> Light Duty Vehicles Flex    3702131 2571986 1718932 #> Diesel Trucks                267227  185651  124076 #> Diesel Urban Busses          298061  207072  138392 #> Diesel Intercity Busses        8222    5712    3817 #> Gasohol Motorcycles         1213830  843285  563592 #> Flex Motorcycles              88390   61407   41040  # or the code bellow for the same result # DETRAN 2016 data for total number of vehicles for 5 Brazilian states (Sao Paulo, # Rio de Janeiro, Minas Gerais, Parana and Santa Catarina) # vahicle distribution of Sao Paulo  fleet <- vehicles(total_v = c(27332101, 6377484, 10277988, 7140439, 4772160),                   area_name = c(\"SP\", \"RJ\", \"MG\", \"PR\", \"SC\"),                   distribution = c( 0.4253, 0.0320, 0.3602, 0.0260,                                    0.0290, 0.0008, 0.1181, 0.0086),                   category =  c(\"LDV_E25\",\"LDV_E100\",\"LDV_F\",\"TRUCKS_B5\",                                 \"CBUS_B5\",\"MBUS_B5\",\"MOTO_E25\",\"MOTO_F\"),                   type = c(\"LDV\", \"LDV\", \"LDV\",\"TRUCKS\",                           \"BUS\",\"BUS\",\"MOTO\", \"MOTO\"),                   fuel = c(\"E25\", \"E100\", \"FLEX\",\"B5\",                            \"B5\",\"B5\",\"E25\", \"FLEX\"),                   vnames = c(\"Light duty Vehicles Gasohol\",\"Light Duty Vehicles Ethanol\",                              \"Light Duty Vehicles Flex\",\"Diesel trucks\",\"Diesel urban busses\",                              \"Diesel intercity busses\",\"Gasohol motorcycles\",                              \"Flex motorcycles\")) #> vehicles: #>                              Category   Type Fuel        Use       SP      RJ #> Light duty Vehicles Gasohol   LDV_E25    LDV  E25  41 [km/d] 11624342 2712343 #> Light Duty Vehicles Ethanol  LDV_E100    LDV E100  41 [km/d]   874627  204079 #> Light Duty Vehicles Flex        LDV_F    LDV FLEX  41 [km/d]  9845022 2297169 #> Diesel trucks               TRUCKS_B5 TRUCKS   B5 110 [km/d]   710634  165814 #> Diesel urban busses           CBUS_B5    BUS   B5 165 [km/d]   792630  184947 #> Diesel intercity busses       MBUS_B5    BUS   B5 165 [km/d]    21865    5101 #> Gasohol motorcycles          MOTO_E25   MOTO  E25 140 [km/d]  3227921  753180 #> Flex motorcycles               MOTO_F   MOTO FLEX 140 [km/d]   235056   54846 #>                                  MG      PR      SC #> Light duty Vehicles Gasohol 4371228 3036828 2029599 #> Light Duty Vehicles Ethanol  328895  228494  152709 #> Light Duty Vehicles Flex    3702131 2571986 1718932 #> Diesel trucks                267227  185651  124076 #> Diesel urban busses          298061  207072  138392 #> Diesel intercity busses        8222    5712    3817 #> Gasohol motorcycles         1213830  843285  563592 #> Flex motorcycles              88390   61407   41040"},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-066555-2021-06-23","dir":"Changelog","previous_headings":"","what":"EmissV 0.665.5.5 (2021-06-23)","title":"EmissV 0.665.5.5 (2021-06-23)","text":"substitution rgdal sf","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-066554-2021-06-16","dir":"Changelog","previous_headings":"","what":"EmissV 0.665.5.4 (2021-06-16)","title":"EmissV 0.665.5.4 (2021-06-16)","text":"added support EDGAR, EDGAR_HTAPv2, GAINS, RCP, MACCITY, FFDAS, ODIAC, VULCAN ACES inventories read()","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-066530-2020-12-11","dir":"Changelog","previous_headings":"","what":"EmissV 0.665.3.0 (2020-12-11)","title":"EmissV 0.665.3.0 (2020-12-11)","text":"CRAN release: 2020-10-08 Removing warning (due Migration PROJ6/GDAL3) read() changing “+proj=longlat +ellps=GRS80 +no_defs” tp “+proj=longlat” read() support ‘VULCAN’ dataset","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-066530-2020-09-28","dir":"Changelog","previous_headings":"","what":"EmissV 0.665.3.0 (2020-09-28)","title":"EmissV 0.665.3.0 (2020-09-28)","text":"CRAN release: 2020-10-08 New version CRAN without hi-res dmsp image","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-066521-2020-04-01","dir":"Changelog","previous_headings":"","what":"EmissV 0.665.2.1 (2020-04-01)","title":"EmissV 0.665.2.1 (2020-04-01)","text":"CRAN release: 2020-04-01 New version CRAN fuction new PROJ GDAL function emission checks negative values defoult","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-066520-2020-03-25","dir":"Changelog","previous_headings":"","what":"EmissV 0.665.2.0 (2020-03-25)","title":"EmissV 0.665.2.0 (2020-03-25)","text":"CRAN release: 2020-03-30 New version CRAN","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-066511-2020-03-19","dir":"Changelog","previous_headings":"","what":"EmissV 0.665.1.1 (2020-03-19)","title":"EmissV 0.665.1.1 (2020-03-19)","text":"read update: support EDGAR_v432 EDGAR_v432 added","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-066511-2019-12-27","dir":"Changelog","previous_headings":"","what":"EmissV 0.665.1.1 (2019-12-27)","title":"EmissV 0.665.1.1 (2019-12-27)","text":"gridInfo update: boundary domain simulation added output gridinfo: change output parameter Ylim ylim","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-066510-2019-03-28","dir":"Changelog","previous_headings":"","what":"EmissV 0.665.1.0 (2019-03-28)","title":"EmissV 0.665.1.0 (2019-03-28)","text":"CRAN release: 2019-04-02 lineSource updates: faster, new options grid generation support variables length new profile data 2018 traffic count","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-066504-evil-power-version-3-2019-01-29","dir":"Changelog","previous_headings":"","what":"EmissV 0.665.0.4 evil-power version 3 (2019-01-29)","title":"EmissV 0.665.0.4 evil-power version 3 (2019-01-29)","text":"read support ‘GEIA’ format ECCAD emissions Scenarios Fix ‘MACCITY’ option read","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-066503-evil-power-version-3-2019-01-29","dir":"Changelog","previous_headings":"","what":"EmissV 0.665.0.3 evil-power version 3 (2019-01-29)","title":"EmissV 0.665.0.3 evil-power version 3 (2019-01-29)","text":"read update GridInfo update adictional doc update","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-066502-evil-power-version-2-2018-11-13","dir":"Changelog","previous_headings":"","what":"EmissV 0.665.0.2 evil-power version 2 (2018-11-13)","title":"EmissV 0.665.0.2 evil-power version 2 (2018-11-13)","text":"fix ‘read()’ ‘as_raster = F’ several inputs small fix messages examples","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-066501-evil-power-version-2018-11-13","dir":"Changelog","previous_headings":"","what":"EmissV 0.665.0.1 evil-power version (2018-11-13)","title":"EmissV 0.665.0.1 evil-power version (2018-11-13)","text":"added speciation dataset (pm-iag, bcom edgar 4.3.2) read speciation integated split emissions different species read coef merge different inputs one specie new temporal profiles ‘data(perfil)’ sectors Oliver et al. (2003) Lost new references","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-06650-turbo-version-2018-11-07","dir":"Changelog","previous_headings":"","what":"EmissV 0.665.0 turbo version (2018-11-07)","title":"EmissV 0.665.0 turbo version (2018-11-07)","text":"new speciation fuction total emissions added speciation dataset (veicular-iag mic) read speciation integated","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-06649-2018-07-10","dir":"Changelog","previous_headings":"","what":"EmissV 0.664.9 (2018-07-10)","title":"EmissV 0.664.9 (2018-07-10)","text":"CRAN release: 2018-09-27 fix #20","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-06648-2018-06-19","dir":"Changelog","previous_headings":"","what":"EmissV 0.664.8 (2018-06-19)","title":"EmissV 0.664.8 (2018-06-19)","text":"doc updates","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-06647-2018-05-29","dir":"Changelog","previous_headings":"","what":"EmissV 0.664.7 (2018-05-29)","title":"EmissV 0.664.7 (2018-05-29)","text":"CRAN release: 2018-06-19 CRAN (2018-06-19) added automated tests (cod-cov) lineSource faster, uses sf data.table instead several packages removing: spatsts, maptools, rgeos, rgdal dependencies","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-06646-2018-05-29","dir":"Changelog","previous_headings":"","what":"EmissV 0.664.6 (2018-05-29)","title":"EmissV 0.664.6 (2018-05-29)","text":"adding fest (fast!) argument lineSource lineSource use sp sf","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-06645-2018-05-31","dir":"Changelog","previous_headings":"","what":"EmissV 0.664.5 (2018-05-31)","title":"EmissV 0.664.5 (2018-05-31)","text":"CRAN release: 2018-05-31 CRAN version funcion streetDist included external data reduced 28mb less 1mb examples update functions messages update links data sources used exemples tested, eception plots read (extra data added)","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-06643-2018-03-14","dir":"Changelog","previous_headings":"","what":"EmissV 0.664.3 (2018-03-14)","title":"EmissV 0.664.3 (2018-03-14)","text":"plot output ‘emissions()’ JOSS paper version","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-06642-2018-02-15","dir":"Changelog","previous_headings":"","what":"EmissV 0.664.2 (2018-02-15)","title":"EmissV 0.664.2 (2018-02-15)","text":"function ‘emissions()’ integred read() via Inventory argument","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-06641-2018-02-07","dir":"Changelog","previous_headings":"","what":"EmissV 0.664.1 (2018-02-07)","title":"EmissV 0.664.1 (2018-02-07)","text":"function ‘read()’ global inventories NetCDF","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-06641-2018-01-31","dir":"Changelog","previous_headings":"","what":"EmissV 0.664.1 (2018-01-31)","title":"EmissV 0.664.1 (2018-01-31)","text":"Updates units usage add profiles data(perfil)","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-0662-2018-01-01","dir":"Changelog","previous_headings":"","what":"EmissV 0.662 (2018-01-01)","title":"EmissV 0.662 (2018-01-01)","text":"Updates lineSource exemple data added","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-0661-2017-12-18","dir":"Changelog","previous_headings":"","what":"EmissV 0.661 (2017-12-18)","title":"EmissV 0.661 (2017-12-18)","text":"New function names future work","code":""},{"path":"https://atmoschem.github.io/EmissV/news/index.html","id":"emissv-066-2017-12-08","dir":"Changelog","previous_headings":"","what":"EmissV 0.66 (2017-12-08)","title":"EmissV 0.66 (2017-12-08)","text":"-’m alone: Sergio Joint send sweet function","code":""}]
